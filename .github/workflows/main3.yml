name: APKLEAKS Auto-Workflow

on:
  workflow_dispatch:
    inputs:
      apk_path:
        description: 'Pfad zur einzelnen APK-Datei'
        required: true
        default: 'apk/FSEX MAX_1.0.1_apks.apk'

jobs:
  scan-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip git python3-venv python3-pip

      - name: Install APKLeaks from GitHub
        run: |
          git clone https://github.com/dwisiswant0/apkleaks.git /tmp/apkleaks
          cd /tmp/apkleaks
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          cd -

      - name: Validate APK Path
        run: |
          APK_FILE="${{ inputs.apk_path }}"
          # Backslashes durch Slashes ersetzen
          APK_FILE="${APK_FILE//\\//}"
          if [ ! -f "$APK_FILE" ]; then
            echo "Error: APK file not found: $APK_FILE"
            exit 1
          fi
          echo "Validated APK file: $APK_FILE"

      - name: Scan APK
        id: scan
        run: |
          APK_FILE="${{ inputs.apk_path }}"
          APK_FILE="${APK_FILE//\\//}"
          APK_NAME=$(basename "$APK_FILE" .apk)
          # Sonderzeichen in Name ersetzen für Ordner/ZIP
          SAFE_NAME=$(echo "$APK_NAME" | sed 's/[^A-Za-z0-9._-]/_/g')
          DATE=$(date +'%Y-%m-%d_%H-%M')
          VERSION="run-${GITHUB_RUN_NUMBER}"
          OUTPUT_DIR="apkleaks_output/${SAFE_NAME}_${DATE}_${VERSION}"
          mkdir -p "$OUTPUT_DIR"

          echo "Scanning $APK_FILE ..."
          python /tmp/apkleaks/apkleaks.py -f "$APK_FILE" -o "$OUTPUT_DIR/apkleaks.json" || true

          # HTML-Report mit jq
          HTML_FILE="${OUTPUT_DIR}/${SAFE_NAME}_${DATE}_${VERSION}_report.html"
          if [ -f "$OUTPUT_DIR/apkleaks.json" ]; then
            jq -r \
              '"<html><head><title>APKLeaks Report</title></head><body><h1>APKLeaks Report</h1><pre>" + tostring + "</pre></body></html>"' \
              "$OUTPUT_DIR/apkleaks.json" > "$HTML_FILE"
          fi

          # ZIP alle Outputs
          ZIP_FILE="apkleaks_output/${SAFE_NAME}_${DATE}_${VERSION}_apkleaks.zip"
          cd "$OUTPUT_DIR"
          zip -r "../../${ZIP_FILE}" ./*
          cd ../..

          # Outputs für den Release
          RELEASE_NAME="${SAFE_NAME}_${DATE}_${VERSION}_APKLeaks"
          echo "apk_name=$SAFE_NAME" >> $GITHUB_OUTPUT
          echo "zip_file=$ZIP_FILE" >> $GITHUB_OUTPUT
          echo "html_file=$HTML_FILE" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Upload Workflow Artifact
        uses: actions/upload-artifact@v4
        with:
          name: apkleaks-results-${{ steps.scan.outputs.apk_name }}
          path: |
            "${{ steps.scan.outputs.zip_file }}"
            "${{ steps.scan.outputs.html_file }}"

      - name: Create GitHub Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          tag: "apkleaks-${GITHUB_RUN_NUMBER}"
          name: "${{ steps.scan.outputs.release_name }}"
          body: |
            **APKLeaks Scan Report**
            - APK: `${{ steps.scan.outputs.apk_name }}`
            - Date: $(date +'%Y-%m-%d %H:%M')
            - Version: run-${GITHUB_RUN_NUMBER}
            - Triggered by: ${{ github.actor }}

            The release contains the full scan results:
            - ZIP archive
            - HTML report (clickable)
          artifacts: |
            "${{ steps.scan.outputs.zip_file }}"
            "${{ steps.scan.outputs.html_file }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
