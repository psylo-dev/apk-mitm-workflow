name: APK-MITM Workflow

on:
  workflow_dispatch:
    inputs:
      use_certificate:
        description: 'Use certificate for patching'
        type: boolean
        default: false
      replace_api_key:
        description: 'Replace Google Maps API key'
        type: boolean
        default: false
      use_custom_apktool:
        description: 'Use custom apktool.jar from /jars folder'
        type: boolean
        default: false

jobs:
  patch-and-release:
    runs-on: ubuntu-latest
    env:
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      CERTIFICATE: ${{ secrets.CERTIFICATE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List files in apk/ directory
        run: ls -al apk/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install apk-mitm
        run: npm install -g apk-mitm

      - name: Prepare certificate if input checked
        if: ${{ inputs.use_certificate && env.CERTIFICATE != '' }}
        run: |
          echo "${{ env.CERTIFICATE }}" > certificate.pem
          echo "Certificate prepared"

      - name: Patch APK with apk-mitm and apply changes
        run: |
          cd apk
          ARGS=""
          
          # Apktool-Pfad nur hinzufügen, wenn die Checkbox aktiviert ist
          if [ "${{ inputs.use_custom_apktool }}" == "true" ]; then
            APKTOOL_JAR=$(find ../jars -maxdepth 1 -name "apktool*.jar" | head -n1)
            if [ -n "$APKTOOL_JAR" ]; then
              ARGS="$ARGS --apktool $APKTOOL_JAR"
              echo "Using custom apktool: $APKTOOL_JAR"
            fi
          fi

          # Optional: Zertifikat hinzufügen
          if [ "${{ inputs.use_certificate }}" == "true" ] && [ -f "../certificate.pem" ]; then
            ARGS="$ARGS --certificate ../certificate.pem"
            echo "Using certificate.pem"
          fi
          
          # Dekompilieren der APK
          apk-mitm *.{apk,xapk,apks} --decompile || true
          
          DECOMPILED_DIR=$(find . -type d -name "*-patched" -maxdepth 1)
          if [ -n "$DECOMPILED_DIR" ]; then
            # API Key ersetzen, falls ausgewählt
            if [ "${{ inputs.replace_api_key }}" == "true" ] && [ "${{ env.GOOGLE_MAPS_API_KEY }}" != "" ]; then
              echo "Replacing Google Maps API key..."
              
              if grep -q 'com.google.android.geo.API_KEY' "$DECOMPILED_DIR/AndroidManifest.xml"; then
                sed -i "s|<meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"[^\"]*\"|<meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"${{ env.GOOGLE_MAPS_API_KEY }}\"|" "$DECOMPILED_DIR/AndroidManifest.xml"
              else
                STRINGS_FILE=$(find "$DECOMPILED_DIR/res" -name "strings.xml" | head -n1)
                if [ -f "$STRINGS_FILE" ]; then
                  sed -i "s|<string name=\"google_maps_key\">[^<]*</string>|<string name=\"google_maps_key\">${{ env.GOOGLE_MAPS_API_KEY }}</string>|" "$STRINGS_FILE"
                fi
              fi
            fi
            
            # Neu kompilieren und signieren
            apk-mitm "$DECOMPILED_DIR" $ARGS || true
            mv "$DECOMPILED_DIR"/*.apk ../patched.apk || echo "No patched APK found"
          else
            echo "No decompiled directory found. Skipping API key replacement and repackaging."
          fi
          cd ..

      - name: Create GitHub Release
        if: ${{ success() && hashFiles('patched.apk') != '' }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "patched.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ github.run_number }}
          name: Patched APK v${{ github.run_number }}
          body: |
            Automated patched APK with apk-mitm
            - Certificate used: ${{ inputs.use_certificate && env.CERTIFICATE != '' && 'yes' || 'no' }}
            - Custom Apktool used: ${{ inputs.use_custom_apktool && (hashFiles('jars/*.jar') != '') && 'yes' || 'no' }}
            - Google Maps API Key replaced: ${{ inputs.replace_api_key && env.GOOGLE_MAPS_API_KEY != '' && 'yes' || 'no' }}
          allowUpdates: true
          artifactContentType: application/vnd.android.package-archive
