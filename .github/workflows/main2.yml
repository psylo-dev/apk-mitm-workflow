name: APK-MITM auto-workflow

on:
  workflow_dispatch:
    inputs:
      apk_file_path:
        description: 'Path to the APK/APKS file in the "apk/" folder (e.g., "apk/app.apks")'
        required: true
        default: 'apk/ZEUS_9.40.apks'

      replace_api_key:
        description: 'Replace Google Maps API Key?'
        required: false
        default: false
        type: boolean
      use_certificate:
        description: 'Use custom .pem certificate from secret?'
        required: false
        default: false
        type: boolean
      release_name:
        description: 'GitHub Release Name'
        required: false
        default: 'Auto-Release'

jobs:
  patch-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install apk-mitm globally
        run: npm install -g apk-mitm

      - name: Create certificate file from secret
        if: ${{ inputs.use_certificate == true }}
        run: |
          echo "${{ secrets.CERTIFICATE }}" > certificate.pem
          echo "Certificate file created from secret."
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}

      - name: Patch and Modify APK
        id: patch
        run: |
          ARGS=""
          if [ "${{ inputs.replace_api_key }}" == "true" ] && [ -n "${{ secrets.GOOGLE_MAPS_API_KEY }}" ]; then
            ARGS="$ARGS --replace-google-maps-api-key"
            echo "API key replacement enabled."
          fi
          
          if [ "${{ inputs.use_certificate }}" == "true" ] && [ -f "./certificate.pem" ]; then
            ARGS="$ARGS --certificate ./certificate.pem"
            echo "Using custom certificate for signing."
          fi
          
          echo "Running apk-mitm with arguments: $ARGS"
          apk-mitm ${{ inputs.apk_file_path }} $ARGS
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          
      - name: Find Patched File
        id: find_patched_file
        run: |
          PATC_FILE=$(find . -maxdepth 2 -name "*-patched.apks" | head -n1)
          if [ -z "$PATC_FILE" ]; then
            echo "Error: Patched file not found."
            exit 1
          fi
          echo "Patched file found: $PATC_FILE"
          echo "patched_file=$PATC_FILE" >> $GITHUB_OUTPUT

      - name: Create Draft Release
        uses: ncipollo/release-action@v1
        with:
          # A unique tag is not required for a draft release
          tag: 'v-draft-${{ github.run_id }}'
          name: ${{ inputs.release_name }} - Draft
          body: "This is a draft release created by a workflow without a Git tag. Please publish it manually."
          artifacts: "${{ steps.find_patched_file.outputs.patched_file }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true  # This creates a draft release that does not need a tag to be published immediately

      - name: Upload as Workflow Artifact
        uses: actions/upload-artifact@v4
        with:
          name: patched-apks
          path: ${{ steps.find_patched_file.outputs.patched_file }}
